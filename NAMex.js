let currentEx;


document.getElementById('select').addEventListener('change', changeEx);

document.getElementById('LoadSol').addEventListener('click', PreLoadAlg);


function changeEx() {
    currentEx = this.selectedIndex - 1;

    let fragment = document.createDocumentFragment();
    let elem = document.createElement("div");

    elem.innerHTML = exercises[currentEx];
    elem.setAttribute('id', 'div');

    fragment.appendChild(elem);
    document.getElementById('div').replaceWith(fragment);
}

function PreLoadAlg () {
    answer = answers[currentEx];
    let answerWord = answer.slice(0, answer.indexOf(' '));
    let answerCode = answer.slice(answer.indexOf(' ') + 1, answer.length);

    loadAlg(answerWord, answerCode);
}


let exercises = [
    '<p>Алфавит - <strong>{a,b,c}</strong>. Если буква \'a\' входит в слово, то выдать \'a\', иначе выдать пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Удаляем все буквы \'b\' и \'c\' (правила 1 и 2).</p>' +
    '<p>2. Из всех букв \'a\' оставляем только одну (правило 3).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Удвоить каждую букву в слове.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 5).</p>' +
    '<p>2. Гоним \'*\' через слово слева направо, удваивая буквы (правила 1,2 и 3).</p>' +
    '<p>3. По исчерпании букв удаляем \'*\' (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2,3}</strong>. Перевести число из четверичной системы счисления в двоичную.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'#*\' слева от слова (правило 8), причем \'#\' необходим для удаления возможного незначащего нуля.</p>' +
    '<p>2. Гоним \'*\' через слово слева направо, заменяя каждую четверичную цифру на две двоичные цифры (правила 1,2,3 и 4).</p>' +
    '<p>3. По исчерпании цифр удаляем \'*\' (правило 5), удаляем незначащий ноль, который \n' +
    'появляется, если левая четверичная цифра - 1 (правило 6) и, наконец, удаляем \'#\' (правило 7).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Если слово непустое, то удалить его первую букву; в противном случае оставить пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 5).</p>' +
    '<p>2. Удаляем первую букву и останавливаемся (правила 1,2 и 3).</p>' +
    '<p>3. Если слово пустое, то удаляем \'*\' и останавливаемся (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Прибавить единицу к троичному числу.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 9). Гоним \'*\' через слово слева направо (правила 5, 6 и 7). Затем заменяем ее на \'#\' (правило 8).</p>' +
    '<p>2. Гоним \'#\' справа налево до первого символа, отличного от двойки, или, если все двойки, до начала слова. Заменяем двойки нулями. ' +
    'Как только встречаем первый символ, отличный от двойки, увеличиваем его на единицу и останавливаемся (правила 1,2 и 3).</p>' +
    '<p>3. Если в слове только двойки, то приписываем слева единицу и останавливаемся (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{|,0,1,2}</strong>. Перевести число из единичной системы счисления в троичную.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'0*\' слева от слова (правило 7).</p>' +
    '<p>2. Далее строим троичное число левее слова (начальное число - 0). Построение состоит из последовательности однотипных шагов. На каждом шаге забираем от \n' +
    'исходного числа палочку (правило 5), прибавляя затем к троичному числу единицу (правила 1,2,3 и 4).</p>' +
    '<p>3. Символ \'#\' - признак того, что забрали от исходного числа палочку. По исчерпании палочек останавливаемся (правило 6).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Переставить буквы в слове так, чтобы вначале располагались буквы \'a\', затем буквы \'b\', a затем буквы \'c\'.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Достаточно переставлять символы в каждой из комбинаций \'ba\', \'cb\' и \'ca\' до тех пор, пока ни одной такой комбинации не останется.</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Если слово содержит равное количество букв \'a\' и \'b\', то выдать пустое слово, иначе выдать любое непустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Удаляем все пары \'ab\' и \'ba\'.</p>' +
    '<p>2. Если слово содержит равное количество букв \'a\' и \'b\', то останется пустое слово, иначе ' +
    'останется слово из тех букв, которых было больше в исходном слове.</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Слово имеет четную длину. Удалить его правую половину.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 8). Далее - последовательность однотипных шагов. На каждом шаге удаляем один правый символ. </p>' +
    '<p>2. Передвигаем \'*\' на одну позицию вправо, одновременно ставя символ \'#\' (правила 5 и 6); если справа' +
    'от \'*\' нет символов, то останавливаемся (правило 7).</p>' +
    '<p>3. Двигаем \'#\' вправо до конца слова (правила 1 и 2).</p>' +
    '<p>4. Удаляем правый символ (правила 3 и 4).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,=}</strong>. Удвоить слово через знак \'=\'.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'=*\' слева от слова (правило 10). Далее - последовательность однотипных шагов.</p>' +
    '<p>2. Описание одного шага. а) Переставляем \'*\' на одну позицию вправо (правила 7 и 8), ' +
    'одновременно добавляя символ \'c\' (для \'a\') или \'d\' (для \'b\').</p>' +
    '<p>3. Гоним \'c\' и \'d\' влево до \'=\' ' +
    '(правила 1,2,3 и 4), после чего меняем их обратно на \'a\' и \'b\' (правила 5 и 6).</p>' +
    '<p>4. По исчерпании символов исходного слова останавливаемся (правило 9).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2,3}</strong>. Перевести двоичное число в четверичное.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 11).</p>' +
    '<p>2. Гоним \'*\' в конец слова (правила 8 и 9), после чего заменяем ее на \'#\' (правило 10).</p>' +
    '<p>3. Гоним \'#\' в начало слова, заменяя каждую пару двоичных цифр на соответствующую ' +
    'четверичную цифру (правила 1,2,3 и 4).</p>' +
    '<p>4. Завершаем алгоритм (если количество цифр в числе нечетно, то применяем правило 5 ' +
    'или 6, иначе применяем правило 7).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Удалить из числа(троичная система) незначащие нули.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 5).</p>' +
    '<p>2. Удаляем все левые нули, кроме последнего (правило 1).</p>' +
    '<p>3. Если далее - 1 или 2, то удаляем последний левый 0 и останавливаемся (правила 2 и 3).</p>' +
    '<p>4. Если же в числе только нули, то оставляем самый правый 0 (правила 1 и 4).</p>',

    '<p>Алфавит - <strong>{0,1,2,|}</strong>. Перевести число из троичной системы счисления в единичную.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Заменяем единицы или двойки нулем, добавляя \'|\' для единицы и \'||\' для двойки (правила 2 и 3).</p>' +
    '<p>2. Прогоняем \'|\' через двоичное слово слева направо, каждый раз утраивая количество \'|\' (правило 1).</p>' +
    '<p>3. В заключение удаляем все нули (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Если исходное слово - \'abba\', то выдать букву \'a\', иначе выдать пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*#\' слева от слова и гоним \'#\' в конец (правила 8, 1 и 2).</p>' +
    '<p>2. Если слово - \'abba\', то выдаем букву \'a\' (правило 3), иначе все удаляем (правила 4 - 7).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Умножить троичное число на 2.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>Программа складывает троичное число с самим собой, что равносильно умножению на 2.</p>' +
    '<p>1. Ставим слева от числа \'*\' и гоним ее вправо до конца слова (правила 13, 9, 10, 11 и 12).</p>' +
    '<p>2. Гоним символы \'#\' и \'^\' справа налево, выполняя сложение (правила 1 - 8). Символ \'#\' ' +
    'означает, что при сложении в предыдущем разряде не было переноса в старший разряд, а ' +
    'cимвол \'^\' означает, что такой перенос был.</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Поделить троичное число нацело на 2.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'^*\' слева от слова, причем \'^\' нужен для удаления возможного незначащего нуля (правило 12).</p>' +
    '<p>2. Гоним \'*\' и \'#\' cлева направо, выполняя деление обычным способом, т.е. перенося \'вниз\' ' +
    'цифру за цифрой (правила 1 - 8). Символ \'#\' означает, что остаток при предыдущем ' +
    'делении был равен 1, а символ \'*\' означает, что остаток был равен нулю.</p>' +
    '<p>3. По окончании деления удаляем незначащий ноль (если он появился) и останавливаемся ' +
    '(правила 9, 10 и 11).</p></details><br />'

];

let answers = [
    'abc b->\nc->\naa->a',

    'abc *a->aa*\n*b->bb*\n*c->cc*\n*=>\n->*',

    '3210 *0->00*\n*1->01*\n*2->10*\n*3->11*\n*->\n#0=>\n#=>\n->#*',

    'abc *a=>\n*b=>\n*c=>\n*=>\n->*',

    '201 0#=>1\n1#=>2\n2#->#0\n#=>1\n*0->0*\n*1->1*\n*2->2*\n*->#\n->*',

    '|||| 2#->#0\n1#->2\n0#->1\n#->1\n*|->#*\n*=>\n->0*',

    'ccbabacab ba->ab\ncb->bc\nca->ac',

    'aabbab ab->\nba->',

    'babaabab #a->a#\n#b->b#\na#->\nb#->\n*b->b*#\n*a->a*#\n*=>\n->*',

    'abab ac->ca\nad->da\nbc->cb\nbd->db\n=c->a=\n=d->b=\n*a->ca*\n*b->db*\n*=>\n->=*',

    '101 00#->#0\n01#->#1\n10#->#2\n11#->#3\n0#=>0\n1#=>1\n#=>\n*1->1*\n*0->0*\n*->#\n->*',

    '00021012 *00->*0\n*01=>1\n*02=>2\n*=>\n->*',

    '21 |0->0|||\n1->0|\n2->0||\n0->',

    'abba #a->a#\n#b->b#\n*abba#=>a\n#->\n*a->*\n*b->*\n*=>\n->*#',

    '210 0#->#0\n1#->#2\n2#->^1\n#=>\n0^->#1\n1^->^0\n2^->^2\n^=>1\n*0->0*\n*1->1*\n*2->2*\n*->#\n->*',

    '112 #0->1#\n#1->2*\n#2->2#\n#->\n*0->0*\n*1->0#\n*2->1*\n*->\n^01=>1\n^02=>2\n^=>\n->^*'
];


